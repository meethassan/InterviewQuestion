/*
// Definition for a Node.
public class Node {
    public int val;
    public IList<Node> neighbors;

    public Node(){}
    public Node(int _val,IList<Node> _neighbors) {
        val = _val;
        neighbors = _neighbors;
}
*/
public class Solution {
    Dictionary<int,Node> visited;
    public Node CloneGraph(Node node) {
        //var toProcess = new Queue<Node>();
         visited = new Dictionary<int,Node>();
        //Node returnNode;
        //toProcess.Enqueue(node);
        
        /*while(toProcess.Count()>0){
            Node cNode = toProcess.Dequeue();
            var neighbor = new List<Node>();
            foreach(Node n in cNode.neighbors){
                var cNeighbor = new Node():
                neighbors
            }
            
            returnNode = new Node(cNode)
        }*/
        
       return Process(node);
    }
    
    Node Process(Node n){
        
        //get if exists
        if(visited.ContainsKey(n.val))
            return visited[n.val];
       
        //save new node
        Node newNode = new Node();
        newNode.val = n.val;
        newNode.neighbors = new List<Node>();
        visited.Add(newNode.val,newNode);
        
        //loop neighbors
        foreach(Node ne in n.neighbors){
            var nNode = Process(ne);
            newNode.neighbors.Add(nNode);
        }
        return newNode;
    }
}
