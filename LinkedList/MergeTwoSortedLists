/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode MergeTwoLists(ListNode l1, ListNode l2) {
        ListNode l1Head = l1;
        ListNode l2Head = l2;
        ListNode resultHead = new ListNode(-1);
        ListNode current = resultHead;
        
        if(l1==null && l2==null)
            return null;
        else if(l1!=null && l2==null)
            return l1;
        else if(l1==null && l2!=null)
            return l2;
        //#1 insert into new list as 2 pointer on both list 
        //move only forward which inserted into result
        //if max l1 of <l2 
        
        //-1->1->3
        while(l1!=null || l2!=null){
            if(l1!=null && l2==null){
                current.next = new ListNode(l1.val);
                    current = current.next;
                    l1 = l1.next;
            }
            else if(l1==null && l2!=null){
                current.next = new ListNode(l2.val);
                    current = current.next;
                    l2= l2.next;
            }
            else if(l1!=null && l2!=null){
                if(l1.val<l2.val){//move one
                    current.next = new ListNode(l1.val);
                    current = current.next;
                    l1 = l1.next;
                }
                else if(l2.val<l1.val){//move other
                    current.next = new ListNode(l2.val);
                    current = current.next;
                    l2= l2.next;
                }
                else{
                    current.next = new ListNode(l1.val); //move both
                    current = current.next;
                    current.next = new ListNode(l2.val); //move both
                    current = current.next;
                    l1 = l1.next;
                    l2 = l2.next;
                }
            }
                
        }
        
        return resultHead.next;
    }
}
